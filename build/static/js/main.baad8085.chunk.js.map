{"version":3,"sources":["components/Tile.jsx","components/Timer.jsx","components/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["Tile","props","classes","isLit","react_default","a","createElement","className","onClick","toggleTiles","Timer","time","mins","Math","floor","secs","concat","formatTime","Board","_useState","useState","_useState2","Object","slicedToArray","isWinner","setWinner","_useState3","createBoard","_useState4","board","setBoard","_useState5","_useState6","setTime","_useState7","_useState8","intervalId","setId","_useState9","_useState10","moves","setMoves","startTimer","id","setInterval","prevTime","newBoard","y","rows","row","x","cols","push","random","litChance","toggleAdjacentTiles","coord","hasWon","_coord$split$map","split","map","el","Number","_coord$split$map2","changedBoard","JSON","parse","stringify","toggleTile","every","tile","prevMoves","displayedBoard","_loop","components_Tile","key","useEffect","clearInterval","defaultProps","App","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.baad8085.chunk.js","sourcesContent":["import React from 'react'\nimport \"./Tile.css\"\n\n\nfunction Tile(props) {\n\n  function handleClick() {\n    // call the board to handle toggle adjacent tiles\n    props.toggleTiles();\n  }\n\n  let classes = \"Tile\" + (props.isLit ? \" Tile-lit\" : \"\");\n\n  return (\n    <div className={classes} onClick={handleClick} />\n  )\n}\n\n\nexport default Tile;","import React from 'react'\n\nexport default function Timer(props) {\n    const { time } = props;\n\n    function formatTime(time) {\n        let mins = Math.floor(time / 60);\n        let secs = time % 60;\n        if (secs < 10) secs = \"0\" + secs;\n        if (mins < 10) mins = \"0\" + mins;\n\n        return `${mins}:${secs}`\n    }\n\n    return (\n        <div>\n            Time: {formatTime(time)}\n        </div>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport Tile from \"./Tile\";\nimport './Board.css';\nimport Timer from \"./Timer\";\n\n// game board\n\nfunction Board(props) {\n\n  // set initial state\n  const [isWinner, setWinner] = useState(false);\n  const [board, setBoard] = useState(createBoard());\n  const [time, setTime] = useState(0);\n  const [intervalId, setId] = useState(0);\n  const [moves, setMoves] = useState(0);\n\n\n  function resetGame() {\n    clearInterval(intervalId);\n    startTimer();\n\n    setWinner(false);\n    setBoard(createBoard());\n    setMoves(0);\n  }\n\n\n  function startTimer() {\n    setTime(0);\n\n    let id = setInterval(() => {\n      setTime(prevTime => prevTime + 1);\n    }, 1000);\n\n    setId(id);\n  }\n\n  // create a rows X cols sized board, each tile randomly lit or unlit\n  function createBoard() {\n    let newBoard = [];\n\n    // create the board with true or false values for each tile\n    for (let y = 0; y < props.rows; y++) {\n      let row = [];\n\n      // create the individual rows of the board\n      for (let x = 0; x < props.cols; x++) {\n        row.push(Math.random() < props.litChance)\n      }\n      newBoard.push(row);\n    }\n\n    return newBoard;\n  }\n\n\n  // handle tile toggle, determine isWinner\n  function toggleAdjacentTiles(coord) {\n    let { cols, rows } = props;\n    let [y, x] = coord.split(\"-\").map(el => Number(el));\n    let changedBoard = JSON.parse(JSON.stringify(board));\n    let hasWon = false;\n    // let [y, x] = coord.split(\"-\").map(Number);\n\n    function toggleTile(y, x) {\n      // check if the given tile coord is on the board, if so, toggle the tile\n      if (x >= 0 && x < cols && y >= 0 && y < rows) {\n        changedBoard[y][x] = !changedBoard[y][x];\n      }\n    }\n\n    toggleTile(y, x);\n    toggleTile(y, x - 1);\n    toggleTile(y, x + 1);\n    toggleTile(y - 1, x);\n    toggleTile(y + 1, x);\n\n    hasWon = changedBoard.every(row => row.every(tile => !tile))\n\n    setMoves(prevMoves => prevMoves + 1);\n    setBoard(changedBoard);\n    setWinner(hasWon);\n  }\n\n  // create the board to be displayed, as a table\n  let displayedBoard = [];\n  for (let y = 0; y < props.rows; y++) {\n    let row = [];\n\n    // create each tile and each row, \n    // get the isLit info from the board state\n    for (let x = 0; x < props.cols; x++) {\n      // give each tile a key in (y-x) format\n      let coord = `${y}-${x}`\n      row.push(\n        <Tile\n          key={coord}\n          isLit={board[y][x]}\n          toggleTiles={() => toggleAdjacentTiles(coord)} />\n      )\n    }\n\n    // push each row to the table board, as a table row\n    displayedBoard.push(<div className=\"Board-row\" key={y}>{row}</div>)\n  }\n\n  useEffect(() => {\n    startTimer();\n  }, [])\n\n  return (\n    <div>\n      {\n        isWinner\n          ? <div>\n            {clearInterval(intervalId)}\n            <h1 className=\"h1-glow\">you win!</h1>\n          </div>\n          : <div>\n            <h1 className=\"h1-glow\">make it dark</h1>\n            <div className=\"Board\">\n              {displayedBoard.map(row => row)}\n            </div>\n          </div>\n      }\n      <Timer time={time} />\n      <div>Moves: {moves}</div>\n      <button className=\"Board-button\" onClick={resetGame}>restart</button>\n    </div>\n  )\n}\n\nBoard.defaultProps = {\n  rows: 5,\n  cols: 5,\n  litChance: 0.25\n}\n\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./components/Board\";\nimport \"./App.css\";\n\n// lights out game\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}